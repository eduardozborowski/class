// Integer Exercises

// Integers
type Inte { 
  neg(num: Neg)
  pos(num: Pos)
}

// Positive Numbers
type Pos { 
  zero
  succ(pred: Pos)
}

// Negative Numbers
type Neg { 
  one
  pred(succ: Neg)
}

// example
// -0 does not exist
// Increments a negative number by one
neg_succ(n: Neg): Neg
  case n { 
    one:  Neg.one
    pred: n.succ
  }

// Functions for negative numbers to help testing 
// Do not edit those functions

// Converts Neg to Nat
neg_to_nat(n: Neg): Nat
  case n { 
    one:  Nat.succ(Nat.zero)
    pred: Nat.succ(neg_to_nat(n.succ))
  }
  
// Converts Nat to Neg
nat_to_neg(n: Nat): Neg
  neg_succ(nat_to_neg_aux(n))
  
  // Aux function for Nat.to_neg
nat_to_neg_aux(n: Nat): Neg
  case n {
    zero: Neg.one
    succ: Neg.pred(nat_to_neg_aux(n.pred))
  }

// Converts Pos to Nat
pos_to_nat(n: Pos): Nat
  case n { 
    zero:  Nat.zero
    succ:  Nat.succ(pos_to_nat(n.pred))
  }

// Converts Int to nat
inte_to_nat(n: Inte): Nat
  case n {
    neg: neg_to_nat(n.num)
    pos: pos_to_nat(n.num)
  }

// Converts Nat to Pos
nat_to_pos(n: Nat): Pos
  case n { 
    zero: Pos.zero
    succ: Pos.succ(nat_to_pos(n.pred))
  }

// Converts Pos to String
pos_show(n: Pos): String
  "+"|Nat.show(pos_to_nat(n))

// Converts Neg to String
neg_show(n: Neg): String
  "-"|Nat.show(neg_to_nat(n))

// Converts Int to String
inte_show(n: Inte): String
  case n {
    neg: neg_show(n.num) 
    pos: pos_show(n.num) 
  }

// Creates an int sign
// true  = Positive 
// false = Negative
int(sign: Bool, num: Nat): Inte
  case sign {
    true: Inte.pos(nat_to_pos(num))
    false:
      case num {
        zero: Inte.pos(Pos.zero)
        succ: Inte.neg(nat_to_neg(num))
      }
  }


// Exercises:

// Increments an Integer
// int(false, 1)     = +0
// int(false, 2)     = -1
// int(true,  2)     = +3
inc(a: Inte): Inte  
  case a {
    pos: Inte.pos(Pos.succ(a.num))
    neg: case a.num {
      one: Inte.pos(Pos.zero)
      pred: Inte.neg(a.num.succ)
    }
  }

// Decrements an Integer
// int(false, 1) = -2
// int(true,  2) = +1
// int(true,  0) = -1
dec(a: Inte): Inte
  case a {
    pos: case a.num {
      zero: Inte.neg(Neg.one)
      succ: Inte.pos(a.num.pred)
    }
    neg: Inte.neg(Neg.pred(a.num))
  }
// Doubles an Integer
// int(false, 4) = -8
// int(false, 1) = -2
// int(true,  2) = +4
dbl(a: Inte): Inte 
  case a {
    pos: case a.num {
      succ: inc(inc(dbl(dec(a))))
      zero: Inte.pos(Pos.zero)
    }
    neg: case a.num {
      one: Inte.neg(Neg.pred(a.num))
      pred: dec(dec(dbl(inc(a))))
    }
   }

// Adds two Integers
// int(false, 4) + int(false, 2) = -6
// int(false, 4) + int(true,  2) = -2
add(a: Inte, b: Inte): Inte
  case a {
    pos: case a.num {
      succ: add(dec(a), inc(b))
      zero: b
    }
    neg: case a.num {
      one: dec(b)
      pred: add(inc(a), dec(b))
    }
  }

// Multiplies two Integers
// int(false, 2) * int(true, 3)  = -6
// int(false, 4) * int(false, 5) = +20
mul(a: Inte, b: Inte): Inte
  case a b {
    pos _: case a.num {
      succ: add(b, mul(dec(a),b))
      zero: Inte.pos(Pos.zero)
    }
    neg neg: case a.num {
      one: int(true, neg_to_nat(b.num))
      pred: add(mul(Inte.neg(Neg.one), b), mul(inc(a),b))
    }
    neg pos: case a.num {
      one: int(false, pos_to_nat(b.num))
      pred: add(mul(Inte.neg(Neg.one), b), mul(inc(a),b))
    }
  }

// Subtracts two Integers
// int(false, 6) - int(false, 6) = +0
// int(false, 4) - int(false, 6) = +2
sub(a: Inte, b: Inte): Inte
  case a b {
    pos pos: case a.num b.num {
      succ zero: a
      zero succ: int(false, inte_to_nat(b))
      succ succ: sub(dec(a), dec(b))
    } default Inte.pos(Pos.zero)
    neg neg: case a.num b.num {
      pred one: a
      one pred: b
      pred pred: add(a, int(true, inte_to_nat(b)))
    } default Inte.neg(Neg.one)
    pos neg: case a.num b.num {
      zero one: int(true, inte_to_nat(b))
      zero pred: int(true, inte_to_nat(b))
      succ one: inc(a)
      succ pred: add(a, int(true, inte_to_nat(b)))
    }
    neg pos: case a.num b.num {
      one zero: a
      pred zero: a
      one succ: add(a,b)
      pred succ: add(int(false, inte_to_nat(a)), int(false, inte_to_nat(b)))
    }
  } default Inte.pos(Pos.zero)
// Equal // Given two Integers, returns true if both are the same and false otherwise.
eql(a: Inte, b: Inte): Bool 
  case a b {
    pos pos: case a.num b.num {
      zero zero: true
      succ succ: eql(dec(a), dec(b))
    } default false
    neg neg: case a.num b.num {
      one one: true
      pred pred: eql(inc(a), inc(b))
    } default false
 } default false

// Greater than
// int(false, 2) > int(false, 5) = True
// int(false, 5) > int(false, 1) = False
// int(false, 2) > int(true,  0) = False
// int(true,  0) > int(false, 2) = True
gtn(a: Inte, b: Inte): Bool // if A > B then True else false
  case a b {
    pos pos: case a.num b.num {
      succ zero: true
      succ succ: gtn(dec(a), dec(b))
    } default false
    neg neg: case a.num b.num {
      one pred: true
      pred pred: gtn(inc(a), inc(b))
  } default false
    pos neg: true
  } default false

// Lower than
// int(false, 1) < int(true,  0) = True
// int(true,  0) < int(false, 1) = False
ltn(a: Inte, b: Inte): Bool // if A > B then False else true
    case a b {
    pos pos: case a.num b.num {
      succ zero: false
      succ succ: gtn(dec(a), dec(b))
    } default true
    neg neg: case a.num b.num {
      one pred: false
      pred pred: gtn(inc(a), inc(b))
  } default true
    pos neg: false
  } default true

// Minimum
// min(int(false, 1), int(true,  0)  = -1
// min(int(false, 1), int(false, 3)) = -3
min(a: Inte, b: Inte): Inte // if A < B then A else B
  case a b {
    neg pos: a
    pos neg: b
    neg neg: case a.num b.num {
      one pred: b
      pred one: a
      pred pred: dec(min(inc(a), inc(b)))
    } default Inte.neg(Neg.one)
    pos pos: case a.num b.num {
      succ succ: inc(min(dec(a), dec(b)))
    } default Inte.pos(Pos.zero)
  } default Inte.pos(Pos.zero)

// Maximum
// max(int(false, 1), int(true,  0)) = +0
// max(int(false, 1), int(false, 3)) = -1
max(a: Inte, b: Inte): Inte // if A > B then A else B
    case a b {
    neg pos: b
    pos neg: a
    neg neg: case a.num b.num {
      one pred: a
      pred one: b
      pred pred: dec(max(inc(a), inc(b)))
    } default Inte.neg(Neg.one)
    pos pos: case a.num b.num {
      succ zero: a
      zero succ: b
      succ succ: inc(max(dec(a), dec(b)))
    } default Inte.pos(Pos.zero)
  } default Inte.pos(Pos.zero)

// Half
// Divides an Integer by two
// int(false, 4) = -2
// int(false, 1) = +0
// int(true,  6) = +3
hlf(a: Inte): Inte
  case a {
    pos: case a.num {
        zero: Inte.pos(Pos.zero)
        succ: case a.num.pred {
          zero: Inte.pos(Pos.zero)
          succ: inc(hlf(dec(dec(a))))
        }
    }
    neg: case a.num {
      one: Inte.pos(Pos.zero)
      pred: case a.num.succ {
        one: Inte.neg(Neg.one)
        pred: dec(hlf(inc(inc(a))))
      }
    }
  }

// Division
// int(true,  2)  / int(true,  2)  = +1
// int(false, 8)  / int(true,  4)  = -2
// int(false, 11) / int(false, 5)  = +2
// int(true,  10) / int(false, 12) = +0
// def ℤ.divide : ℤ → ℤ → ℤ
//   | ℤ.pos m, ℤ.pos n => ℤ.pos (ℕ.divide m n)
//   | ℤ.pos m, ℤ.neg n => ℤ.neg (ℕ.toNz (ℕ.divide m (ℕz.toNat n)))
//   | ℤ.neg m, ℤ.pos n => ℤ.neg (ℕ.toNz (ℕ.divide (ℕz.toNat m) n))
//   | ℤ.neg m, ℤ.neg n => ℤ.pos (ℕ.divide (ℕz.toNat m) (ℕz.toNat n))
div(a: Inte, b: Inte): Inte 
  let x = inte_to_nat(a)
  let y = inte_to_nat(b)
  case a b {
    pos pos: case a.num b.num {
      succ succ: int(true, Nat.div(x,y))
    }default Inte.pos(Pos.zero)
    pos neg: case a.num {
      zero: Inte.pos(Pos.zero)
      succ: int(false, Nat.div(x,y))
    }
    neg pos: case b.num {
      zero: Inte.pos(Pos.zero)
      succ: int(false, Nat.div(x,y))
    }
    neg neg: int(true, Nat.div(x,y))
  }

ex_06: IO<Unit>
  IO {
    Tests._06.inc(inc)
    Tests._06.dec(dec)
    Tests._06.dbl(dbl)
    Tests._06.add(add)
    Tests._06.mul(mul)
    Tests._06.sub(sub)
    Tests._06.eql(eql)
    Tests._06.gtn(gtn)
    Tests._06.ltn(ltn)
    Tests._06.min(min)
    Tests._06.max(max)
    Tests._06.hlf(hlf)
    Tests._06.div(div)
  }