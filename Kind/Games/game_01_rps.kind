// Play options
type Object {
  rock
  paper
  scissors
}

// Converts a text to an Object. If not possible, returns rock
Object.read(code: String): Object
  if code =? "rock" then Object.rock else 
  if code =? "paper" then Object.paper else 
  if code =? "scissors" then Object.scissors else Object.rock
// Converts a number to an Object. If not possible, returns rock
Object.from_nat(n: Nat): Object
  if n =? 0 then Object.rock else
  if n =? 1 then Object.paper else
  if n =? 2 then Object.scissors else Object.rock
// Checks if Object a beats Object b
// Draw = false
Object.wins(a: Object, b: Object): Bool
  case a b {
    paper rock: true
    scissors paper: true
    rock scissors: true
  }default false

// If wins return "You won", else "You lost"
Object.match_result(win: Bool): String
  if win then "You won" else "You lost"

teste: IO(Unit)
  IO {
    IO.print("Pick one: rock, paper or scissors")
    // Asks for user input and saves it in variable line
    get user_input = IO.get_line
    // Converts the user_input (String) to the Object type
    let user_object = Object.read(user_input)

    // Returns a random number below 3
    // 0, 1 or 2
    get random_num = IO.random(3)

    // Converts random_num (Nat) to the Object type
    let cpu_object = Object.from_nat(random_num)

    // Compares user_object and cpu_object and returns true if user wins
    let user_won = Object.wins(user_object, cpu_object)

    // Final message to be said: "You won" or "You lost"
    let final_message = Object.match_result(user_won)

    IO.print(final_message)

    teste
  }

//

// = [{1, "a"}, {2, "b"}]
// reverse([3,4,5])

// reverse.go([], [3,4,5])
//              ys      xs

// ys        xs
// []        [3, 4, 5]

// reverse.go([3, []], [4, 5])
//                  ys        xs

// reverse.go([4, [3, []]], [5])

// reverse.go([5, [4, [3, []]]], [])

//Applies a function to all elements of a list
// Problems.p18<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
//   case xs {
//     nil: List.nil!
//     cons: List.cons!(fn(xs.head), Problems.p18!!(fn, xs.tail))
//   }

// teste:_
// List.show!(Nat.show, Problems.p18!!(Nat.succ, [3,4,5]))

// fn[3] Problems(fn,[4,5]
// fn[3] fn[4] Problems(fn,[5]
// fn[3] fn[4] fn [5] Problems(fn,[]
// fn[3] fn[4] fn[5] []



// Concatenates two lists
// Problems.p17<A: Type>(xs: List<A>, ys: List<A>): List<A>
// case xs{
//   cons: List.cons!(xs.head, Problems.p17!(xs.tail, ys))
//   nil: ys
// }
// teste:_

// List.show!(Nat.show, Problems.p17!([3,2,1],[4,3,2]))


// List.cons!(xs.head, List.cons!(ys.head,(Problems.p17!(xs.tail, ys.tail))))
// Problems.p17!([3,2,1],[4,3,2]))
//List.cons!(3, Problems.p17([2,1], [4,3,2])
//List.cons!(3, List.cons!(2, Problems.p17!([1], [4,3,2]))
//List.cons!(3, List.cons!(2, List.cons!(1, Problems.p17!([], [4,3,2]))
//List.cons!(3, List.cons!(2, List.cons!(1, [4,3,2])
